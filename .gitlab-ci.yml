stages:
  - test
  - build
  - deploy

run_tests:
  image: python:3.11
  stage: test
  services:
    - postgres:13.10
  variables:
    POSTGRES_DB: db_name
    POSTGRES_USER: db_user
    POSTGRES_PASSWORD: db_password
    DJANGO_DEBUG: 'False'
    DJANGO_DB_HOST: postgres
    DJANGO_DB_PORT: 5432
    DJANGO_SECRET_KEY: __SECRET_KEY__
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - flake8 .
    - pytest

build_photoorganizer_image_and_upload_to_docker_hub:
  image: docker:latest
  stage: build
  variables:
    CI_REGISTRY: docker.io
    CI_REGISTRY_IMAGE: index.${CI_REGISTRY}/${CI_REGISTRY_USER}/photoorganizer
  before_script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY}
  script:
    - docker build --file ./django/Dockerfile -t {CI_REGISTRY_USER}/photoorganizer:latest
    - docker push {CI_REGISTRY_USER}/photoorganizer:latest

deploy_to_server:
  image: ubuntu:latest
  stage: deploy
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client  -y )'
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-keygen -p -P $SSH_PASSPHRASE -N "" -f ~/.ssh/id_rsa
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $HOST >> ~/.ssh/known_host
  script:
    - scp -oStrictHostKeyChecking=no docker-compose.prod.yml $USER@$HOST:~/photoorganizer/
    - ssh -oStrictHostKeyChecking=no $USER@$HOST 'cd photoorganizer && sudo docker compose -f docker-compose.prod.yml pull && sudo docker compose -f docker-compose.prod.yml down && sudo docker compose -f docker-compose.prod.yml up -d'
